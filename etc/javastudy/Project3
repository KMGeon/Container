package project;

import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JTextArea;

public class project3 extends JFrame implements KeyListener {
	private GameHandler handler;
	private JTextArea textArea = new JTextArea();

	public project3() {
		setTitle("Let's play 4 In A Line");
		setSize(800, 800);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// x를 누르면 나가짐
		setLocationRelativeTo(null); // 화면을 중간에 배치
		textArea.setFont(new Font("Courier New", Font.PLAIN, 30));// 폰트
		textArea.addKeyListener(this);
		add(textArea);// textArea를 jfame에 추가 시킬려고 add
		textArea.setEditable(false);// 게임을 하면서 textarea를 수정을 못하게 할려고
		setVisible(true);// jfame을 눈에 보이게 하기 위해서
		handler = new GameHandler(textArea);// 게임헨들러가 TEXTAREA를 접근을 할수 있게
		new Thread(new GameThread()).start();// 별도의 쓰레드로 루프를 실행 승리판정이나 돌을 놓는것을 계속 무한루프로 실행해야하기때문에
	}

	public static void main(String[] args) {
		new project3();
	}

	class GameThread implements Runnable {
		@Override
		public void run() {
// game loop
			while (!handler.isGameOver()) {// 게임이 끝나기 전까지 계속 돌아야되서isGameOver를 넣어서 while문을 한번씩 돌떄마다 체크를 한다. true면 게임이
											// 종료(그래서 앞에!) false면 while을 계속 돈다
				handler.drawAll();
				handler.gameTiming();
			}
// game over
			handler.drawGameOver();// 게임이 끝났다는걸 출력
		}
	}

	public void restart() {
		handler.initData();
		new Thread(new GameThread()).start();
	}

	@Override
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_RIGHT: // Right key pressed
			handler.moveRightStone();
			break;
		case KeyEvent.VK_LEFT: // Left key pressed
			handler.moveLeftStone();
			break;
		case KeyEvent.VK_DOWN:
			handler.moveDownStone();
			break;
		case KeyEvent.VK_Y: // Y key pressed
			if (handler.isGameOver())
				restart();
			break;
		case KeyEvent.VK_N: // N key pressed
			if (handler.isGameOver())
				System.exit(0);
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}
}




///////////////////////////////////////////////////////
package project;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JTextArea;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;


public class GameHandler {
	private final int SCREEN_WIDTH = 38;;// 스크린에 가로에 몇개의 글자가 들어갈 수 있는지
	private final int SCREEN_HEIGHT = 25;// 스크린
	private final int LEFT_PADDING = 1;// 스크린이랑 필드랑 패딩이 없으면 바로 옆에 있어서 답답할수 있다 그래서 띄움
	private final int UP_PADDING = 3;// 위에도 3칸 띄움
	private final int FIELD_WIDTH = 13;
	private final int FIELD_HEIGHT = 6;
	private JTextArea textArea;
	private char concaveStone;
	private int moveStone;
	private char[][] buffer;// 스크린에 채울거
	private int field[];// 필드를 1차원배열로 한 이유는 충돌체크(밑으로 게속 돌이 가는게 아니라
	// 필드를 1차원배열과 인티저로 한 이유::
	private boolean isGameOver;
	private int turn;
	private int BconcaveStoneScore=0;
	private int WconcaveStoneScore = 0;
	private int PBconcaveStoneScore, PWconcaveStoneScore;

	/**/public GameHandler(JTextArea ta) {
		textArea = ta;
		field = new int[FIELD_WIDTH * FIELD_HEIGHT];// 필드가 1차원 배열
		buffer = new char[SCREEN_WIDTH][SCREEN_HEIGHT];
		initData();// 각종 데이터 초기화

		try {
			BufferedReader in = new BufferedReader(new FileReader("PBconcaveStoneScore.txt"));
			PBconcaveStoneScore = Integer.parseInt(in.readLine());
			in.close();
		} catch (FileNotFoundException e) {
			PBconcaveStoneScore = 0;
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			BufferedReader in = new BufferedReader(new FileReader("PWconcaveStoneScore.txt"));
			PWconcaveStoneScore = Integer.parseInt(in.readLine());
			in.close();
		} catch (FileNotFoundException e) {
			PWconcaveStoneScore = 0;
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**/public void gameTiming() {
		try {
			Thread.sleep(50);//50ms 쉼
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		}
	}
	
	/**/private void clearBuffer() {
		for (int y = 0; y < SCREEN_HEIGHT; y++) {
			for (int x = 0; x < SCREEN_WIDTH; x++) {
				buffer[x][y] = ' ';//앞에서 만든 2차원배열을 초기화 빈 공간을 .로 표현
			}
		}
	}


	public void initData() {
		for (int x = 0; x < FIELD_WIDTH; x++) // 필드를 초기화
			for (int y = 0; y < FIELD_HEIGHT; y++) {

				if (x == 0 && y == 0)
					field[y * FIELD_WIDTH + x] = 0;
				else if (x % 2 == 1)
					field[y * FIELD_WIDTH + x] = 1;

				else if (y == 0 && x == FIELD_WIDTH - 1)
					field[y * FIELD_WIDTH + x] = 2;

				else if (y == 0)
					field[y * FIELD_WIDTH + x] = 3;

				else if (0 < y && y < FIELD_HEIGHT - 1 && x == 0)
					field[y * FIELD_WIDTH + x] = 4;

				else if (x == FIELD_WIDTH - 1 && y > 0 && y < FIELD_HEIGHT - 1)
					field[y * FIELD_WIDTH + x] = 5;

				else if (y == FIELD_HEIGHT - 1 && x == 0)
					field[y * FIELD_WIDTH + x] = 6;

				else if (y == FIELD_HEIGHT - 1 && x == FIELD_WIDTH - 1)
					field[y * FIELD_WIDTH + x] = 7;

				else if (y == FIELD_HEIGHT - 1)
					field[y * FIELD_WIDTH + x] = 8;

				else
					field[y * FIELD_WIDTH + x] = 9;
				turn = 0;
				moveStone = 0;
			}
		isGameOver = false;
		clearBuffer();
	}

	/**/private void drawToBuffer(int px, int py, String c) {//빈공간 위에 점수랑 이름 필드를 하기 위해 버퍼 2개를 만듬 인자가 다름
		for (int x = 0; x < c.length(); x++) {
			buffer[px + x + LEFT_PADDING][py] = c.charAt(x);
		}//스트링 타입 여러개
	}

	/**/private void drawToBuffer(int px, int py, char c) {
		buffer[px][py] = c;
	}//나는 캐릭터 탑입 한글자를 저장하고 싶으면 여기
	//private를 사용한 이유는 gamehandler 안에서만 사용되게

	
	
	public void drawAll() {
		for (int x = 0; x < FIELD_WIDTH; x++) {
			for (int y = 0; y < FIELD_HEIGHT; y++) {
				drawToBuffer(x + LEFT_PADDING, y + UP_PADDING, "┌─┐┬├┤└┘┴┼●○".charAt(field[y * FIELD_WIDTH + x]));
			}//일차원배열로 만들려먼
		}
		if (isGameOver) {
			concaveStone = ' ';
			drawToBuffer(moveStone + 1, 1, concaveStone);
		} else if (turn == 0) {
			concaveStone = '●';
			drawToBuffer(moveStone + 1, 1, concaveStone);
		} else {
			concaveStone = '○';
			drawToBuffer(moveStone + 1, 1, concaveStone);
		}
		drawScore();
		drawPScore();
		drawToBuffer(20, 10, " by M. G. Kim");
		render();//화면에 뿌져줌
	}

	public void drawScore() {
		drawToBuffer(17, 2, "┌─── CURRENT───┐");
		drawToBuffer(17, 3, "│              │");
		drawToBuffer(17, 4, "└──────────────┘");
		drawToBuffer(20, 3, "● :" + BconcaveStoneScore);
		drawToBuffer(25, 3, " ○ :" + WconcaveStoneScore);
	}

	public void drawPScore() {
		drawToBuffer(17, 7, "┌───PREVIOUS───┐");
		drawToBuffer(17, 8, "│              │");
		drawToBuffer(17, 9, "└──────────────┘");
		drawToBuffer(20, 8, "● :" + PBconcaveStoneScore);
		drawToBuffer(25, 8, " ○ :" + PWconcaveStoneScore);
	}
	
		private void render() {
		StringBuilder sb = new StringBuilder();
		for (int y = 0; y < SCREEN_HEIGHT; y++) {
			for (int x = 0; x < SCREEN_WIDTH; x++) {
				sb.append(buffer[x][y]);
			}
			sb.append("\n");
		}
		textArea.setText(sb.toString());
	}

	public void moveRightStone() {
		if (moveStone < 12) {
			drawToBuffer(moveStone + 1, 1, ' ');
			moveStone += 2;
		}
	}

	public void moveLeftStone() {
		if (moveStone > 1) {
			drawToBuffer(moveStone + 1, 1, ' ');
			moveStone -= 2;
		}
	}

	public void moveDownStone() {
		for (int y = FIELD_HEIGHT - 1; y >= 0; y--) {
			if (turn == 0 && (field[y * FIELD_WIDTH + moveStone] != 10 && field[y * FIELD_WIDTH + moveStone] != 11)) {
				field[y * FIELD_WIDTH + moveStone] = 10;
				turn++;
				break;
			} else if (turn == 1
					&& (field[y * FIELD_WIDTH + moveStone] != 10 && field[y * FIELD_WIDTH + moveStone] != 11)) {
				field[y * FIELD_WIDTH + moveStone] = 11;
				turn--;
				break;
			}
		}
	}

	

	/*public void gameLogic(){

	}
	*/
	public void drawGameOver() {
		drawAll();
		drawToBuffer(15, 7,    "╔══════════════╗");
		drawToBuffer(15, 9,    "║              ║");
		drawToBuffer(15, 10, "║ AGAIN? (Y/N) ║");
		drawToBuffer(15, 11, "╚══════════════╝");
		if (turn == 1) {
			BconcaveStoneScore++;
			drawToBuffer(15, 8, "║ ● WINS!      ║");
		} else if (turn == 0) {
			WconcaveStoneScore++;
			drawToBuffer(15, 8, "║ ○ WINS!       ║");
		}
		render();
		BufferedWriter out;
		try {
			out = new BufferedWriter(new FileWriter("PBconcaveStoneScore.txt"));
			out.write(String.valueOf(BconcaveStoneScore));
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			out = new BufferedWriter(new FileWriter("PWconcaveStoneScore.txt"));
			out.write(String.valueOf(WconcaveStoneScore));
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}



	public boolean isGameOver() {
		for (int x = 0; x < FIELD_WIDTH; x++) 
			for (int y = 0; y < FIELD_HEIGHT; y++) {
				if (x < 7 && field[y * FIELD_WIDTH + x] == 10 && field[y * FIELD_WIDTH + x + 2] == 10
						&& field[y * FIELD_WIDTH + x + 4] == 10 && field[y * FIELD_WIDTH + x + 6] == 10)
					isGameOver = true;
				else if (y < 3 && field[y * FIELD_WIDTH + x] == 10 && field[(y + 1) * FIELD_WIDTH + x] == 10
						&& field[(y + 2) * FIELD_WIDTH + x] == 10 && field[(y + 3) * FIELD_WIDTH + x] == 10)
					isGameOver = true;
				else if (x < 7 && y < 3 && field[y * FIELD_WIDTH + x] == 10
						&& field[(y + 1) * FIELD_WIDTH + x + 2] == 10 && field[(y + 2) * FIELD_WIDTH + x + 4] == 10
						&& field[(y + 3) * FIELD_WIDTH + x + 6] == 10)
					isGameOver = true;
				else if (x < 7 && y < 3 && field[(y + 3) * FIELD_WIDTH + x] == 10
						&& field[(y + 2) * FIELD_WIDTH + x + 2] == 10 && field[(y + 1) * FIELD_WIDTH + x + 4] == 10
						&& field[y * FIELD_WIDTH + x + 6] == 10)
					isGameOver = true;
				else if (x < 7 && field[y * FIELD_WIDTH + x] == 11 && field[y * FIELD_WIDTH + x + 2] == 11
						&& field[y * FIELD_WIDTH + x + 4] == 11 && field[y * FIELD_WIDTH + x + 6] == 11)
					isGameOver = true;
				else if (y < 3 && field[y * FIELD_WIDTH + x] == 11 && field[(y + 1) * FIELD_WIDTH + x] == 11
						&& field[(y + 2) * FIELD_WIDTH + x] == 11 && field[(y + 3) * FIELD_WIDTH + x] == 11)
					isGameOver = true;
				else if (x < 7 && y < 3 && field[y * FIELD_WIDTH + x] == 11
						&& field[(y + 1) * FIELD_WIDTH + x + 2] == 11 && field[(y + 2) * FIELD_WIDTH + x + 4] == 11
						&& field[(y + 3) * FIELD_WIDTH + x + 6] == 11)
					isGameOver = true;
				else if (x < 7 && y < 3 && field[(y + 3) * FIELD_WIDTH + x] == 11
						&& field[(y + 2) * FIELD_WIDTH + x + 2] == 11 && field[(y + 1) * FIELD_WIDTH + x + 4] == 11
						&& field[y * FIELD_WIDTH + x + 6] == 11)
					isGameOver = true;
			}
		return isGameOver;
	}
}
